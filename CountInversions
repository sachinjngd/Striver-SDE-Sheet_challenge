import java.util.* ;
import java.io.*; 
public class Solution {
    static long count = 0;
    public static long getInversions(long arr[], int n) {
        
        mergeSort(arr , 0 , arr.length - 1);
        
      //  int ans = count;
        return count;
        
    }
    
    public static long[] mergeSort(long[] arr , int i , int j){
        if(i == j){
            long[] ans = new long[1];
            ans[0] = arr[i];
            return ans;
        }
        int mid = (i+j)/2;
        
        long[] left = mergeSort(arr , i , mid);
        long[] right = mergeSort(arr, mid + 1 , j);
        
        long[] merged = merge(left , right);
        
        return merged;
        
    }
    
    public static long[] merge(long[] left , long[] right){
        int i = 0;
        int j= 0;
        int k = 0;
        long[] merged = new long[left.length + right.length];
        while(i< left.length && j < right.length){
            if(left[i] <= right[j]){
                merged[k] = left[i];
                i++;
                k++;
            }
            else{
                count += (left.length - i);
                merged[k] = right[j];
                j++;
                k++;
            }
        }
        while(i < left.length){
            merged[k] = left[i];
            i++;
            k++;
        }
        while(j < right.length){
            merged[k] = right[j];
                j++;
                k++;
        }
        
        return merged;
    }
}
